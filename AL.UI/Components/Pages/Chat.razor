@page "/chat/{IdReserva:int}"
@inject IReservasRepositorio ReservaRepositorio
@inject IAlojamientoRepositorio AlojamientoRepositorio
@inject IUsuarioRepositorio UsuarioRepositorio
@inject IServicioChat ServicioChat
@inject IServicioSesion ServicioSesion
@inject ReservaEnviarMensaje ReservaEnviarMensaje
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        gap: 8px;
        padding: 10px 0;
        height: 400px;
        /* Alto fijo, puedes ajustar el valor */
        overflow-y: auto;
        /* Scroll vertical si hay muchos mensajes */
        background: #fff;
        /* Fondo blanco como en la imagen */
        border-radius: 12px;
        /* Bordes redondeados suaves */
        box-shadow: 0 2px 8px #0001;
        /* Sombra ligera opcional */
    }

    .mensaje {
        max-width: 60%;
        padding: 10px 16px;
        border-radius: 18px;
        margin-bottom: 4px;
        word-break: break-word;
        position: relative;
        font-size: 1.25rem;
        /* Aumenta el tamaño de la letra */
        display: inline-block;
        clear: both;
    }

    .mensaje-emisor {
        background: #58a14c;
        color: white;
        align-self: flex-end;
        border-bottom-right-radius: 4px;
        border-bottom-left-radius: 18px;
        border-top-left-radius: 18px;
        border-top-right-radius: 18px;
    }

    .mensaje-receptor {
        background: #f1f0f0;
        color: #222;
        align-self: flex-start;
        border-bottom-left-radius: 4px;
        border-bottom-right-radius: 18px;
        border-top-left-radius: 18px;
        border-top-right-radius: 18px;
    }

    .fecha {
        font-size: 0.75rem;
        color: #34333393;
        position: absolute;
        right: 12px;
        bottom: 6px;
        margin-left: 0;
    }

    .chat-footer {
        display: flex;
        gap: 8px;
        margin-top: 12px;
    }

    .chat-footer input[type="text"] {
        flex: 1;
        padding: 8px;
        border-radius: 16px;
        border: 1px solid #ccc;
        outline: none;
    }

    .chat-footer button {
        background: #2196f3;
        color: white;
        border: none;
        border-radius: 16px;
        padding: 8px 20px;
        cursor: pointer;
        font-weight: bold;
    }

    .mensaje-restringido {
        text-align: center;
        color: #888;
        margin-top: 20px;
        font-size: 1.1rem;
    }
</style>

<h3>Chat @(alojamiento?.Nombre) del @(reserva?.FechaInicioEstadia.ToShortDateString()) al
    @(reserva?.FechaFinEstadia.ToShortDateString()) </h3>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @((MarkupString)ErrorMessage)
    </div>
}
@if (chat.Count == 0 || tieneMensajes == 0)
{
    <p>No hay mensajes en esta conversación.</p>
}
else
{
    <div class="chat-container">
        @foreach (var mensaje in chat)
        {
            // If the connected user is the sender, display on the right; otherwise, display on the left
            var esEmisor = mensaje.IdEmisor == ServicioSesion.Id;
            <div class="mensaje @(esEmisor ? "mensaje-emisor" : "mensaje-receptor")">
                <strong style="font-size:0.8em;">
                    @if (esEmisor)
                    {
                        @:Tu
                    }
                    else
                    {
                        @(nombres.ContainsKey(mensaje.IdEmisor) ? nombres[mensaje.IdEmisor] : "Desconocido")
                    }

                </strong>
                <p>@mensaje.Contenido</p>
                <span class="fecha">@mensaje.FechaEnvio.ToString("g")</span>
            </div>
        }
    </div>
}
@if (reserva != null && DateTime.Now <= reserva.FechaFinEstadia.AddDays(1))
{
    if (ServicioSesion.Rol == RolUsuario.Usuario)
    {
        <div class="chat-footer">
            <input type="text" @bind="nuevoMensaje" placeholder="Escribe un mensaje..." />
            <button @onclick="EnviarMensaje">Enviar</button>
        </div>
    }
    if (ServicioSesion.Rol == RolUsuario.Encargado)
    {
        if (reserva.EstadoReserva == EstadoReserva.EnCurso || reserva.EstadoReserva == EstadoReserva.Finalizada)
        {
            <div class="chat-footer">
                <input type="text" @bind="nuevoMensaje" placeholder="Escribe un mensaje..." />
                <button @onclick="EnviarMensaje">Enviar</button>
            </div>
        }
        else if (reserva.EstadoReserva == EstadoReserva.Confirmada)
        {
            <p class="mensaje-restringido">No puede enviar mensajes. Para reservas confirmadas, responde el administrador.</p>
        }
    }

}
else if (ServicioSesion.Rol == RolUsuario.Usuario || ServicioSesion.Rol == RolUsuario.Encargado)
{
    <p class="mensaje-restringido">No puede enviar mensajes. Pasaron 7 días desde el checkout</p>
}
@if (reserva != null && (reserva.EstadoReserva == EstadoReserva.Confirmada) && (ServicioSesion.Rol ==
RolUsuario.Administrador))
{
    <div class="chat-footer">
        <input type="text" @bind="nuevoMensaje" placeholder="Escribe un mensaje..." />
        <button @onclick="EnviarMensaje">Enviar</button>
    </div>
}
else if (ServicioSesion.Rol == RolUsuario.Administrador && (reserva?.EstadoReserva == EstadoReserva.EnCurso ||
reserva?.EstadoReserva == EstadoReserva.Finalizada))
{
    <p class="mensaje-restringido">No puede enviar mensajes. Para reservas en curso o finalizadas responde el encargado </p>
}


@code {
    [Parameter] public int IdReserva { get; set; }
    private Reserva? reserva;
    private Alojamiento? alojamiento = new Alojamiento();
    private List<Mensaje> chat = new List<Mensaje>();
    private string nuevoMensaje = string.Empty;
    private bool IsLoggedIn = false;
    private Usuario usuario = null!;
    private String ErrorMessage = string.Empty;
    private String nombreEmisor = string.Empty;
    private String nombreReceptor = string.Empty;
    Dictionary<int, string> nombres = new Dictionary<int, string>();
    int tieneMensajes = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !IsLoggedIn)
        {
            await ServicioSesion.InicializarUsuarioAsync();
            if (ServicioSesion.Rol == RolUsuario.Invitado)
            {
                NavigationManager.NavigateTo("/", true);

            }

            if (ServicioSesion.Usuario != null)
            {
                usuario = ServicioSesion.Usuario;
                IsLoggedIn = true;
                ServicioSesion.IniciarSesion();

            }
            reserva = ReservaRepositorio.ObtenerPorId(IdReserva);
            if (reserva != null)
            {
                alojamiento = await AlojamientoRepositorio.ObtenerPorId(reserva.IdAlojamiento);
                var todosLosMensajes = await ServicioChat.ObtenerConversacionAsync(IdReserva);
                await ServicioChat.MarcarComoLeidosAsync(IdReserva, ServicioSesion.Id);
                // Filtrado según el rol
                if (ServicioSesion.Rol == RolUsuario.Administrador || ServicioSesion.Rol == RolUsuario.Encargado)
                {
                    chat = todosLosMensajes
                    .Where(m => m.IdEmisor == ServicioSesion.Id // Mensajes enviados por el admin/encargado
                    || (m.IdReceptor == ServicioSesion.Id // Mensajes recibidos por el admin/encargado
                    && UsuarioRepositorio.ObtenerPorId(m.IdEmisor)?.Rol == RolUsuario.Usuario // Solo si el emisor es Usuario
                    )
                    ).ToList();
                }
                else // Usuario común
                {
                    chat = todosLosMensajes
                    .Where(m => m.IdEmisor == ServicioSesion.Id || m.IdReceptor == ServicioSesion.Id)
                    .ToList();
                }
                foreach (var mensaje in chat)
                {
                    if (mensaje.IdEmisor == ServicioSesion.Id || mensaje.IdReceptor == ServicioSesion.Id)
                    {
                        tieneMensajes += 1;
                        if (!nombres.ContainsKey(mensaje.IdEmisor))
                        {
                            var usuario = UsuarioRepositorio.ObtenerPorId(mensaje.IdEmisor);
                            if (usuario != null && usuario.Rol == RolUsuario.Usuario)
                            {
                                nombres[mensaje.IdEmisor] = usuario.Nombre;
                            }
                            else if (usuario != null && (usuario.Rol == RolUsuario.Administrador || usuario.Rol == RolUsuario.Encargado))
                            {
                                nombres[mensaje.IdEmisor] = alojamiento?.Nombre ?? "Alojamiento Desconocido";
                            }
                        }
                    }
                }
            }
            StateHasChanged(); // Refresca la UI si es necesario
        }

    }

    private async Task EnviarMensaje()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(nuevoMensaje) && reserva != null)
            {
                Mensaje mensaje = new Mensaje
                {
                    IdReserva = IdReserva,
                    IdEmisor = ServicioSesion.Id,
                    Contenido = nuevoMensaje,
                    FechaEnvio = DateTime.Now
                };

                await ReservaEnviarMensaje.Ejecutar(IdReserva, mensaje);
                chat.Add(mensaje);
                nuevoMensaje = string.Empty;
                StateHasChanged(); // Refresca la UI para mostrar el nuevo mensaje
            }
            else
            {
                // Aquí podrías mostrar un mensaje de error si el mensaje está vacío
                ErrorMessage = "El mensaje no puede estar vacío.";
            }
        }
        catch (Exception ex)
        {
            // Manejo de errores, podrías mostrar un mensaje al usuario
            ErrorMessage = $"Error al enviar el mensaje: {ex.Message}";
        }
        StateHasChanged();// Refresca la UI para mostrar el nuevo mensaje

    }
}