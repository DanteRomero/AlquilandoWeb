@using AL.Aplicacion.Entidades
@inject IServicioSesion Sesion
@inject NavigationManager Nav
@rendermode InteractiveServer
@implements IDisposable

@if (Sesion.SesionIniciada)
{
    <div class="top-row px-4">
        <header class="d-flex justify-content-end p-2">
            <div class="d-flex align-items-center gap-3">
                @if(rol==RolUsuario.Administrador){
                    <a href="/CuentaAdministrador" class="btn btn-secondary">Cuenta</a>
                }
                else if(rol==RolUsuario.Usuario){
                    <a href="/misreservas" class="btn btn-secondary">Cuenta</a>
                }
                else if(rol==RolUsuario.Encargado){
                    <a href="/CuentaEncargado" class="btn btn-secondary">Cuenta</a>
                }
                <button @onclick="CerrarSesion" class="btn btn-primary">Cerrar Sesión</button>
            </div>
        </header>
    </div>
    
}
else
{
    <a href="/IniciarSesion" class="btn btn-outline-primary">Iniciar Sesión</a>
    <a href="/Registrarse" class="btn btn-danger">Registrarse</a>
}



@code {


    private RolUsuario rol => Sesion.Rol;
    private Usuario usuario=null!;
    private bool IsLoggedIn = false;

    protected override void OnInitialized()
    {
        Sesion.OnChange += Recargar;
    }

    private void Recargar()
    {
        InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        Sesion.OnChange -= Recargar;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !IsLoggedIn)
        {
            await Sesion.InicializarUsuarioAsync();
            if(Sesion.Usuario!=null) usuario = Sesion.Usuario;
            IsLoggedIn = true;
            StateHasChanged(); // Refresca la UI si es necesario
        }

    }

    private async Task CerrarSesion()
    {
        await Sesion.LogoutAsync();
        Nav.NavigateTo("/", forceLoad: true);
    }


}
